// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/09/2017 16:29:44"
                                                                                
// Verilog Test Bench template for design : fifo
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns

module fifo_vlg_tst();

reg clock;
reg [3:0] fifo_in;
reg read;
reg reset;
reg write;
// wires                                               
wire fifo_empty;
wire fifo_full;
wire [3:0]  fifo_out;

// assign statements (if any)                          
fifo i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.fifo_empty(fifo_empty),
	.fifo_full(fifo_full),
	.fifo_in(fifo_in),
	.fifo_out(fifo_out),
	.read(read),
	.reset(reset),
	.write(write)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
	clock = 0;
	// fifo_in = 8'b00000000;
	read = 0;
	reset = 0;
	write = 0;
	
	$display("write start");
	#100;
	#5 fifo_in = 4'b1111;write = 1;
	#10 write = 0;

   $display("read start");
	#100;
	#5 read = 1;
	#10 read = 0;
	
	$display("write start");
	#100;
	#5 fifo_in = 4'b0001;write = 1;
	#10 write = 0;

	$display("read start");
	#100;
	#5 read = 1;
	#10 read = 0; 
	
	$display("write start");
	#100;
	#5 fifo_in = 4'b0010;write = 1;
	#10 write = 0;

	$display("read start");
	#100;
	#5 read = 1;
	#10 read = 0; 
	
	$display("write start");
	#100;
	#5 fifo_in = 4'b0011;write = 1;
	#10 write = 0;

	$display("read start");
	#100;
	#5 read = 1;
	#10 read = 0; 
	
	#1000 $finish();     


	
                                             
$display("Running testbench");                       
end                                                   



always                                                                   
begin                                                  
                     
	#5 clock = ~clock;
                                                                                     
end  
                                                  
endmodule

